#!/bin/bash

# set -o errexit
# set -o nounset
# set -o pipefail
# set -u


# function that choose the service to deploy
do_select_service(){
    # declare the service list array
    services_list_array=()
    # get the list of available services
    portainer_services=$(jq '.templates[].title' ./portainer_app_template.json | tr -d '"')
    # append each service to the services_list_array
    while read -r line; do
        services_list_array+=("$line" "$line")
    done <<< "$portainer_services"
    # display whiptail menu listing out available services
    service_to_start=$(whiptail --notags --title "Services" --cancel-button "Quit" --menu "Select Services" 20 100 10 "${services_list_array[@]}" 3>&1 1>&2 2>&3) 
    exitstatus=$?
        if [ $exitstatus = 0 ]; then
            echo "The chosen service is:" $service_to_start
            # if [ -z "$env_full_list" ]; then
            #     do_env_variable_concat
            # fi
            do_env_variable_concat
            do_pre_up_options
        else
            echo "User selected quit."
            exit 0
        fi
}

# function that read all the env variables of a service from the .json file and concat them
do_env_variable_concat(){
    num_of_env=$(jq --arg service_to_start "$service_to_start" '.templates[] | select(.title==$service_to_start) | .env | length' ./portainer_app_template.json)
    echo "Getting Things Ready..."
    env_full_list=$(
        for (( n=0; n<$num_of_env; n++ ))
        do
            env_string=$(jq --arg service_to_start "$service_to_start" --argjson n "$n" '.templates[] | select(.title==$service_to_start) | .env[$n] |.name' ./portainer_app_template.json | tr -d '"')
            env_value_string=$(jq --arg service_to_start "$service_to_start" --argjson n "$n" '.templates[] | select(.title==$service_to_start) | .env[$n] |.default' ./portainer_app_template.json)
            # if [ "$env_value_string" != "null" ]; then
            #     echo "-e ${env_string}=${env_value_string}" | tr '\n' ' '
            # fi
            echo "-e ${env_string}=${env_value_string}" | tr '\n' ' '
        done
    )
    env_full_list=$(echo ${env_full_list})
    echo "The original env varialbe list:${env_full_list}"
}

# function that read the env variable label to change from user input 
do_choose_service_env(){
    service_env_array=()
    service_env=$(jq --arg service_to_start "$service_to_start" '.templates[] | select(.title==$service_to_start) | .env[] |.label' ./portainer_app_template.json | tr -d '"')
    while read -r line; do
        service_env_array+=("$line" "$line")
    done <<< "$service_env"
    # display whiptail menu listing out available services
    env_label_to_configure=$(whiptail --notags --title "Variables" --ok-button "Change" --cancel-button "Save and exit" --menu "Configure variables" 20 100 10 "${service_env_array[@]}" 3>&1 1>&2 2>&3) 
    exitstatus=$?
        if [ $exitstatus = 0 ]; then
            echo "The chosen variable is:" $env_label_to_configure
            do_change_service_env
        else
            echo "User selected Cancel. Return to pre-up menu."
            do_pre_up_options
        fi
}

# function that read the new env variable from user input and then replace it in the origianl $env_full_list
do_change_service_env(){
    env_variable_to_change_default=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .env[] | select(.label==$env_label_to_configure) | .default' ./portainer_app_template.json | tr -d '"')
    echo $env_variable_to_change_default
    env_variable_to_change_description=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .env[] | select(.label==$env_label_to_configure) | .description' ./portainer_app_template.json | tr -d '"')
    # concat the env description and env label if possible
    if [ "$env_variable_to_change_description" != "null" ]; then
        env_variable_label_with_description="${env_label_to_configure}\n${env_variable_to_change_description}"
    else
        env_variable_label_with_description="${env_label_to_configure}"
    fi
    # Check if there are options for the env value
    options_exists_or_not=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .env[] | select(.label==$env_label_to_configure) | has("select")' ./portainer_app_template.json | tr -d '"')
    if [[ $(echo ${options_exists_or_not}) == "true" ]] ; then
        # echo "found options" 
        # declare the options list array
        option_values_array=()
        option_values=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .env[] | select(.label==$env_label_to_configure) | .select[].text ' ./portainer_app_template.json | tr -d '"')
        echo "env_label_to_configure ${env_label_to_configure}"
        # append each options to the option_values_array
        while read -r line; do
            option_values_array+=("$line" "$line")
        done <<< "$option_values"
        # display whiptail menu listing out available options
        value_changed_to_text=$(whiptail --notags --title "Please change the env values" --menu "Options" 20 100 10 "${option_values_array[@]}" 3>&1 1>&2 2>&3) 
        exitstatus=$?
        # echo "value_changed_to_text ${value_changed_to_text}"
        if [ $exitstatus != 0 ]; then
            echo "User selected Cancel."
            do_choose_service_env
        else
            do_get_modified_env_list
        fi
    else
        # echo "no options" 
        value_changed_to_text=$(whiptail --title "Change variable" --inputbox "$env_variable_label_with_description" 20 100 "$env_variable_to_change_default" 3>&1 1>&2 2>&3)
        exitstatus=$?
        if [ $exitstatus != 0 ]; then
            echo "User selected Cancel."
            do_choose_service_env
        else
            do_get_modified_env_list
        fi   
    fi
}

do_get_modified_env_list(){
    # echo "The changing variable label is:${env_label_to_configure}" 
    env_name_to_configure=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .env[] | select(.label==$env_label_to_configure) | .name ' ./portainer_app_template.json | tr -d '"')
    new_env_pair=$(echo "${env_name_to_configure}=${value_changed_to_text}")
    echo "new env pair: ${new_env_pair}"
    # use a different delimiters # in sed to ger rid of the slash issue
    env_full_list=$(echo ${env_full_list} | sed "s#${env_name_to_configure}*\S*#${new_env_pair}#")
    echo "modified env full list is: ${env_full_list}"  
    do_choose_service_env
    # do_pre_up_options
}

do_pre_up_options(){
    pre_up_options=$(whiptail --notags --title "Bring up ${service_to_start}" --menu "options" 20 78 8 "configure" "Configure environment variables" "start" "Start the service" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 0 ]; then
        if [ $pre_up_options == "start" ]; then
            do_ask_for_confirmation
        else
            do_choose_service_env
        fi
    else
        echo "User selected Cancel."
        do_container
    fi
}

do_ask_for_confirmation(){
    if (whiptail --title "Confirmation" --yesno "Do you wan to deploy ${service_to_start}?" 8 78); then
        echo "User selected to deploy ${service_to_start}."
        do_check_service_type
    else
        echo "User selected Cancel, exit to main menu."
        do_pre_up_options
    fi
}

do_check_service_type(){
    do_get_basic_info
    service_type=$(jq --arg service_to_start "$service_to_start" '.templates[] | select(.title==$service_to_start) |.type' ./portainer_app_template.json)
    if [ $service_type == "1" ]; then
        do_docker_run    
    else
        do_docker_compose_up
    fi
    unset 
}

do_get_basic_info(){
    # container image
    container_image=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .image' ./portainer_app_template.json | tr -d '"')
    echo "container_image ${container_image}"
    # container name
    container_name=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .name' ./portainer_app_template.json | tr -d '"')
    if [ "$container_name" != "null" ]; then
        container_name="--name ${container_name}"
    fi
    echo "container_name ${container_name}"
    # container restart policy
    container_restart_policy=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .restart_policy' ./portainer_app_template.json | tr -d '"')
    if [ "$container_restart_policy" != "null" ]; then
        container_restart_policy="--restart=unless-stopped"
    fi
    echo "container_restart_policy ${container_restart_policy}"
    # container network
    container_network=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .network' ./portainer_app_template.json | tr -d '"')
    if [ "$container_network" != "null" ]; then
        container_network="--net ${container_network}"
    fi   
    echo "container_network ${container_network}"
    # container hostname
    container_hostname=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .hostname' ./portainer_app_template.json | tr -d '"')
    if [ "$container_hostname" != "null" ]; then
        container_hostname="-h ${container_hostname}"
    fi   
    echo "container_hostname ${container_hostname}"
    # container privledged
    container_privileged=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .privileged' ./portainer_app_template.json | tr -d '"')
    if [ "$container_privileged" != "null" ]; then
        container_privileged="--privileged=true"
    fi   
    echo "container_privileged ${container_privileged}"
    # container volumes   
    container_volumes=$(jq --arg service_to_start "$service_to_start" '.templates[] | select(.title==$service_to_start) | .volumes' ./portainer_app_template.json | tr -d '"[]\n\t[:blank:]' | sed "s/},{/ -v /g" | sed "s/bind://g" | sed "s/,container//g" | sed "s/auto://g"|tr -d '{}')
    if [ "$container_volumes" != "null" ]; then
        container_volumes="-v ${container_volumes}"
    fi
    echo "container_volumes ${container_volumes}"
    # container command
    container_command=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .command' ./portainer_app_template.json | tr -d '"')
    echo "container_command ${container_command}"
    # container port
    container_ports=$(jq --arg service_to_start "$service_to_start" '.templates[] | select(.title==$service_to_start) | .ports' ./portainer_app_template.json | tr -d '"[][]\n\t[:blank:]' | sed "s/,/ -p /g")
    if [ "$container_ports" != "null" ]; then
        container_ports="-p ${container_ports}"
    fi   
    echo "container_ports ${container_ports}"    
}

do_docker_run(){
    # Final step
    echo "${env_full_list}"
    docker_run_command="${env_full_list} ${container_restart_policy} ${container_network} ${container_hostname} ${container_privileged} ${container_volumes} ${container_ports} ${container_name} ${container_image} ${container_command}"
    # remove unset env variables
    docker_run_command="docker run -d -e $(echo ${docker_run_command} | sed 's/null//g')"
    echo $docker_run_command
    eval $docker_run_command
}

do_docker_compose_up(){
    # Final step
    yml_file_path="./$(jq --arg service_to_start "$service_to_start" '.templates[] | select(.title==$service_to_start) | .repository.stackfile' ./portainer_app_template.json | tr -d '"')"
    #yml_file_path="./${yml_file_path}"
    docker_compose_env_list="$(echo ${env_full_list} | sed 's/-e //g')"
    docker_compose_command="${docker_compose_env_list} docker compose -f ${yml_file_path} up -d"
    echo $docker_compose_command
    eval $docker_compose_command
}

do_print_post_up_info(){
    post_up_info="$(jq --arg service_to_start "$service_to_start" '.templates[] | select(.title==$service_to_start) | .post_up_info' ./portainer_app_template.json | tr -d '"')"
    if [[ $service_to_start == "LoRa Basics™ Station for Docker" ]] || [[ $service_to_start == "UDP Packet Forwarder" ]] || [[ $service_to_start == "2.4GHz Gateway UDP Packet Forwarder" ]]; then
        container_name_raw=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .name' ./portainer_app_template.json | tr -d '"')
        echo $container_name_raw
        docker_container_id=$(docker ps -aqf name=${container_name_raw})
        GATEWAY_EUI=$(docker exec -it ${container_name_raw} ./get_eui.sh | tr -cd  '[a-zA-Z][0-9]'|sed s/GatewayEUI//)
        whiptail --title "Notes" --msgbox "Container id : $docker_container_id \nGateway EUI  : $GATEWAY_EUI \n \n$post_up_info" 30 78
    else
        whiptail --title "Notes" --msgbox  "$post_up_info" 30 78 
    fi

}

do_container(){
    do_select_service
    do_print_post_up_info
}

# if [ $(id -u) -ne 0 ]; then
#   printf "Script must be run as root. Try 'sudo ./portainer-json-parser'\n"
#   exit 1
# fi

#do_container


