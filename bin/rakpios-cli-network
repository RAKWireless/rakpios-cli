#!/bin/bash

do_configure_dhcp()
{
	FILE="/etc/NetworkManager/system-connections/eth0.nmconnection"

	if (whiptail --yes-button "Enable" --no-button "Cancle"  --yesno "Enable your configuration?" 10 60) then

		if [ -e $FILE ]; then
			nmcli connection modify filename $FILE ipv4.addresses '' ipv4.gateway '' ipv4.dns '' ipv4.method auto
			nmcli connection up filename $FILE			
		fi
	else		
		return 0
	fi
}

do_configure_static()
{

	FILE="/etc/NetworkManager/system-connections/eth0.nmconnection"

	IP=$(whiptail --inputbox "input IP address/prefix" 10 60 "192.168.240.100/24" --title "IP address" 3>&1 1>&2 2>&3)
	GW=$(whiptail --inputbox "input Gateway address" 10 60 "192.168.240.1" --title "gateway address" 3>&1 1>&2 2>&3)
    DNS=$(whiptail --inputbox "input dns server address" 10 60 "8.8.8.8" --title "gateway address" 3>&1 1>&2 2>&3)

	if (whiptail --yes-button "Enable" --no-button "Cancle"  --yesno "Enable your configuration?" 10 60) then    					
		if [ -e $FILE ]; then
			nmcli connection modify filename $FILE ipv4.addresses $IP ipv4.gateway $GW ipv4.dns $DNS ipv4.method manual
		else
			nmcli connection add con-name eth0 ifname eth0 type ethernet ipv4.addresses $IP ipv4.gateway $GW ipv4.dns $DNS ipv4.method manual			
		fi
		nmcli connection up filename $FILE
	else
    	return 0
	fi
}

do_configure_ethernet()
{
	#IFACES=$(cat /proc/net/dev | tail -n+3 | cut -d ":" -f1 | sed 's/ //g' | grep -E '^eth|^en')
	IFACE=$(whiptail --title " CONFIGURE ETHERNET" --menu "Selecet Interface:" 15 60 4 \
                "<1>" "eth0"\
                "<2>" "eth1" \
                3>&1 1>&2 2>&3)
    RET=$?
	
	if [ $RET -eq 1 ]; then
                clear
                return 0
    elif [ $RET -eq 0 ]; then
		ADDR=$(whiptail --title "CONFIGURE ETHERNET" --menu "Select IP Address Type:" 15 60 4 \
                "1" "dhcp" \
                "2" "static" \
                3>&1 1>&2 2>&3)
		RET=$?

		if [ $RET -eq 1 ]; then
                clear
                return 0
		elif [ $RET -eq 0 ]; then
			case "$ADDR" in
        	1) do_configure_dhcp $IFACE;;
        	2) do_configure_static $IFACE;;
        	esac
		fi
    fi
}

do_wifi_ap()
{
	SSID=$(whiptail --inputbox "Please enter SSID" 10 60 --title "SSID" 3>&1 1>&2 2>&3)
	PASSWD=$(whiptail --passwordbox "Please enter passphrase. Leave it empty if none." 10 60 --title "Passphrase" 3>&1 1>&2 2>&3)
	FILE="/etc/NetworkManager/system-connections/wlan0.nmconnection"
	if (whiptail --yes-button "Enable" --no-button "Cancle"  --yesno "Enable your configuration?" 10 60) then
		if [ -e $FILE ]; then
			nmcli connection modify filename $FILE wifi.mode ap wifi.ssid $SSID wifi-sec.psk $PASSWD ipv4.method shared ipv4.addresses 192.168.230.1/24
		else
			nmcli connection add con-name wlan0 type wifi ssid $SSID mode ap 802-11-wireless-security.key-mgmt wpa-psk 802-11-wireless-security.psk $PASSWD ipv4.method shared ipv4.addresses 192.168.230.1/24
		fi
		nmcli connection up filename $FILE
	else
		return 0
	fi
}

do_wifi_sta()
{
	FUN=$(whiptail --menu "Configure SSID:" 15 60 4 "1" "Select SSID from scan list" "2" "Enter SSID manually" 3>&1 1>&2 2>&3)
	RET=$?

	if [ $RET -eq 1 ]; then
		clear
		return 0
	elif [ $RET -eq 0 ]; then
    	case "$FUN" in
			1)
			#value=$(sudo nmcli device wifi list | tail -n +2 | awk '{print $2"/"$9" "$10}' | tr '\t' '/' | tr '\n' '/' | tr '-' 'a')
			#vaule=$value"\n"
			#IFS="/"
    		SSID=$(whiptail --menu "Scan List:" 15 60 4 "RAK" "WPA WPA2" "Test-5G" "WPA3" 3>&1 1>&2 2>&3)
			;;
			2)
			SSID=$(whiptail --inputbox "Please enter SSID" 10 60 --title "SSID" 3>&1 1>&2 2>&3)
			;;
		esac
	fi

	PASSWD=$(whiptail --passwordbox "Please enter passphrase. Leave it empty if none." 10 60 --title "Passphrase" 3>&1 1>&2 2>&3)
	FILE="/etc/NetworkManager/system-connections/wlan0.nmconnection"	
	if (whiptail --yes-button "Enable" --no-button "Cancle"  --yesno "Enable your configuration?" 10 60) then

        if [ -e $FILE ]; then
            nmcli connection modify filename $FILE wifi.mode '' wifi.ssid $SSID wifi-sec.psk $PASSWD ipv4.method auto ipv4.addresses '' 
		else
			nmcli connection add con-name wlan0 type wifi ssid $SSID 802-11-wireless-security.key-mgmt wpa-psk 802-11-wireless-security.psk $PASSWD			
        fi
		nmcli connection up filename $FILE
    else
        return 0
    fi
}

do_configure_wifi()
{
	IFACE=$(whiptail --title " CONFIGURE ETHERNET" --menu "Selecet Interface:" 15 60 4 \
                "<1>" "wlan0"\
                3>&1 1>&2 2>&3)
    RET=$?

    if [ $RET -eq 1 ]; then
                clear
                return 0
    elif [ $RET -eq 0 ]; then


		FUN=$(whiptail --title "Configire WiFi" --menu "Select WiFi mode:" 15 60 4 \
                1 "AP mode" \
                2 "STA mode" \
                3>&1 1>&2 2>&3)
		RET=$?

    	if [ $RET -eq 1 ]; then
                clear
                return 0
    	elif [ $RET -eq 0 ]; then
        	case "$FUN" in
				1) do_wifi_ap $IFACE;;
        		2) do_wifi_sta $IFACE;;
			esac
		fi
	fi
}

do_configure_lte()
{
	APN=$(whiptail --inputbox "Please enter APN" 10 60 --title "APN" 3>&1 1>&2 2>&3)
	PIN=$(whiptail --inputbox "Please enter PIN Leave it empty if none." 10 60 --title "PIN" 3>&1 1>&2 2>&3)

	FILE="/etc/NetworkManager/system-connections/gsm.nmconnection"
    if (whiptail --yes-button "Enable" --no-button "Cancle"  --yesno "Enable your configuration?" 10 60) then

        if [ -e $FILE ]; then
	
			if [ -z "$PIN" ]; then
				nmcli connection modify filename $FILE gsm.apn $APN gsm.pin ''
			else
				nmcli connection modify filename $FILE gsm.apn $APN gsm.pin $PIN
			fi
			
        else
			if [ -z "$PIN" ]; then
				nmcli c add type gsm ifname cdc-wdm0 con-name gsm apn $APN 
			else
				nmcli c add type gsm ifname cdc-wdm0 con-name gsm apn $APN gsm.pin $PIN
			fi
        fi
		nmcli connection up gsm		
    else
        return 0
    fi
	
}

do_network_main_menu()
{
	FUN=$(whiptail --title "RAKPiSO NETWORK CONFIG v1.0" --menu "Configuration options:" 15 60 4 \
                1 "Configure Ethernet" \
                2 "Configure WiFi" \
                3 "Configure LTE" \
				3>&1 1>&2 2>&3)
    RET=$?

	if [ $RET -eq 1 ]; then
                clear
                return 0
	elif [ $RET -eq 0 ]; then
		case "$FUN" in
		1) do_configure_ethernet;;
		2) do_configure_wifi;;
		3) do_configure_lte;;
		esac
	fi

}

# if [ $(id -u) -ne 0 ]; then
#   printf "Script must be run as root. Try 'sudo ./whiptail_network_config'\n"
#   exit 1
# fi

# do_network_main_menu
