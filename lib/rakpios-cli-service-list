#!/bin/bash

do_command() {

	if [[ " ${docker_run_services[*]} " =~ " ${CONTAINER_NAME} " ]]; then
		# docker run service
		service_type=1
	else
		# docker compose service
		service_type=0
	fi

	if [ "$service_type" == "1" ]; then
		STATUS=$( docker ps -a --format '{{.Names}}\t{{.Status}}' | grep "$CONTAINER_NAME" | awk '{ print $2 }' )
	else
		STATUS=$( docker compose ls -a | grep "$CONTAINER_NAME" | grep -q "running" && echo "Up" || echo "Exited" )
	fi
	CMD=$(
		whiptail --notags --title "$CONTAINER_NAME" --menu "" 15 60 4 \
			"start" "Start the service" \
			"stop" "Stop the service" \
			"remove" "Remove the service" \
			"log" "Check the logs " \
			3>&1 1>&2 2>&3
	)

	__msg_debug "Executing action $CMD on $CONTAINER_NAME"

	if [ -z "$CMD" ]; then		
		do_service_menu
	else
		case "$CMD" in
		"start")
			if [ "$STATUS" == "Up" ]; then
				whiptail --title "Notes" --msgbox "$CONTAINER_NAME is already started." 10 60
			else
				if [ "$service_type" == "1" ]; then
					docker start "$CONTAINER_NAME" > /dev/null
				else
					docker compose -p "$CONTAINER_NAME" start
				fi
				if [ $? -eq 0 ]; then
					__msg_debug "Docker compose up ran successfully"
					whiptail --title "Notes" --msgbox "$CONTAINER_NAME is started now." 10 60
				else
					__msg_debug "Docker compose up encountered an error"
					whiptail --title "Notes" --msgbox "$CONTAINER_NAME having trouble to start." 10 60
				fi
			fi
			;;
		"stop")
			if [ "$STATUS" == "Exited" ]; then
				whiptail --title "Notes" --msgbox "$CONTAINER_NAME is already stopped." 10 60
			else
				if [ "$service_type" == "1" ]; then
					docker stop "$CONTAINER_NAME" > /dev/null
				else
					docker compose -p "$CONTAINER_NAME" stop
				fi
				if [ $? -eq 0 ]; then
					# __msg_debug "docker compose stop ran successfully"
					whiptail --title "Notes" --msgbox "$CONTAINER_NAME is stopped now." 10 60
				else
					# __msg_debug "docker compose stop encountered an error"
					whiptail --title "Notes" --msgbox "$CONTAINER_NAME having trouble to stop." 10 60
				fi
			fi
			;;
		"remove")
			if [ "$service_type" == "1" ]; then
				docker stop "$CONTAINER_NAME" > /dev/null
				docker rm "$CONTAINER_NAME" > /dev/null
			else
				docker compose -p "$CONTAINER_NAME" down
			fi
			;;
		"log")
			if [[ " ${docker_run_services[*]} " =~ " ${CONTAINER_NAME} " ]]; then
				# start a new session to display docker run service's log
				tmux new-session -d -s service-logs "docker logs -f --timestamps --since 10 $CONTAINER_NAME"
				# Attach to the new session
				tmux attach-session -t service-logs
			else
				# start a new session to display docker compose service's log
				tmux new-session -d -s service-logs "docker compose -p $CONTAINER_NAME logs --follow --since 10"
				# Attach to the new session
				tmux attach-session -t service-logs
			fi

			;;
		esac
	fi
}

do_service_menu() {
	
	# Get lonely containers :)
	SERVICES=$(docker ps -a --format '{{.Names}}' | sort -k1)
	docker_run_services=()
	for service in $SERVICES; do
		output=$(docker inspect "$service" | jq '.[].Config.Labels."com.docker.compose.project.config_files"')
		if [[ "$output" == "null" ]]; then
			docker_run_services+=("$service")
		fi
	done

	# Get docker compose services
	service_list=($(docker compose ls -a | awk '{print $1}' | tail -n +2))
	
	# Append the two array
	service_list=(${service_list[@]} ${docker_run_services[@]})

	if [ ${#service_list[@]} -eq 0 ]; then
		
		whiptail --msgbox "There are no running services" 10 60

	else

		# Sort the array
		IFS=$'\n' sorted=($(sort <<< "${service_list[*]}"))
		unset IFS
		# __msg_debug "List of running services: [$service_list]"

		# Dupplicate it for whiptail
		duplicated=()
		for service in "${sorted[@]}"; do
			duplicated+=("$service" "$service")
		done

		# List
		CONTAINER_NAME=$(whiptail --notags --title "Service List" --menu "" 20 60 10 "${duplicated[@]}" 3>&1 1>&2 2>&3)
		
		# Execute
		if [ -n "$CONTAINER_NAME" ]; then
			do_command
		fi


	fi
}