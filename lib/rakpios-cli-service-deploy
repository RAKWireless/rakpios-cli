#!/bin/bash

# set -o errexit
# set -o nounset
# set -o pipefail
# set -u

declare -A service_env
declare service_name

# List services
do_select_service(){

    # get the list of available services
    services=$(jq '.templates[].title' ${DIR_CNF}/portainer_app_template.json | tr -d '"' | sort)
    
    # declare the service list array
    services_list=()

    # append each service to the services_list
    while read -r line; do
        services_list+=("$line" "$line")
    done <<< "$services"
    
    # display whiptail menu listing out available services
    service_to_start=$(whiptail --notags --title "Services" --cancel-button "Back" --menu "" 20 100 10 "${services_list[@]}" 3>&1 1>&2 2>&3) 
    
    exitstatus=$?
    if [ $exitstatus = 0 ]; then
        
        __msg_debug "Select service:" $service_to_start
        do_pre_up_options

    fi

}

#------------------------------------------------------------------------------
# Generic services
#------------------------------------------------------------------------------

# Concatenates all environment variables in a docker compatible string "-e key=value -e key=value..."
do_env_variable_concat(){

    env_full_list=""
    for k in "${!service_env[@]}"
    do
        env_full_list+=" -e $k=${service_env[$k]}"
    done

}

# Reads the defined environment variables with their default values from the portainer JSON file for the current service
do_get_service_env_defaults() {

    if [ "$service_to_start" == "$service_name" ]; then
        return
    fi
        
    service_name=$service_to_start
    for k in ${!service_env[@]}
    do
        unset service_env[$k]
    done

    service_env=$(jq --arg service_to_start "$service_to_start" '.templates[] | select(.title==$service_to_start) | .env[] | .name+"|"+.default' ${DIR_CNF}/portainer_app_template.json | tr -d '"')
    while read -r pair
    do
        local label=${pair%%|*}
        local default=${pair#*|}
        service_env["$label"]="$default"
    done <<< "$service_env"
    unset service_env[0]

    for k in "${!service_env[@]}"
    do
        __msg_debug "$k=${service_env[$k]}"
    done

}

# Shows the existing environment variables and values and lets the user select one to change
do_choose_service_env() {

    service_env_array=()
    for k in "${!service_env[@]}"
    do
        value=${service_env[$k]}
        key=$(printf "%-25s %65s" $k "$value")
        service_env_array+=("$k" "$key")
    done

    # display whiptail menu listing out available services
    env_label_to_configure=$(whiptail --notags --title "Variables" --ok-button "Change" --cancel-button "Save and Back" --menu "Configure variables" 20 100 10 "${service_env_array[@]}" 3>&1 1>&2 2>&3) 
    exitstatus=$?
    if [ $exitstatus = 0 ]; then
        __msg_debug "Editing variable:" $env_label_to_configure
        do_change_service_env
    else
        __msg_debug "User selected Save & Back. Return to pre-up menu."
        do_pre_up_options
    fi

}

# Show the user a form to change the environment variable
do_change_service_env(){
    
    #env_variable_to_change_default=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .env[] | select(.name==$env_label_to_configure) | .default' ${DIR_CNF}/portainer_app_template.json | tr -d '"')
    env_variable_to_change_default=${service_env[$env_label_to_configure]}
    __msg_debug "Current value for $env_label_to_configure: $env_variable_to_change_default"
    
    # concat the env description and env label if possible
    env_variable_to_change_description=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .env[] | select(.name==$env_label_to_configure) | .description' ${DIR_CNF}/portainer_app_template.json | tr -d '"')
    if [ "$env_variable_to_change_description" != "null" ]; then
        env_variable_label_with_description="${env_label_to_configure}\n${env_variable_to_change_description}"
    else
        env_variable_label_with_description="${env_label_to_configure}"
    fi
    
    # Check if there are options for the env value
    options_exists_or_not=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .env[] | select(.name==$env_label_to_configure) | has("select")' ${DIR_CNF}/portainer_app_template.json | tr -d '"')
    if [[ $(echo ${options_exists_or_not}) == "true" ]] ; then
        # echo "found options" 
        # declare the options list array
        option_values_array=()
        option_values=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" '.templates[] | select(.title==$service_to_start) | .env[] | select(.name==$env_label_to_configure) | .select[].text ' ${DIR_CNF}/portainer_app_template.json | tr -d '"')
        __msg_debug "env_label_to_configure ${env_label_to_configure}"
        # append each options to the option_values_array
        while read -r line; do
            option_values_array+=("$line" "$line")
        done <<< "$option_values"
        # display whiptail menu listing out available options
        value_changed_tmp=$(whiptail --notags --title "Please change the env values" --menu "Options" 20 100 10 "${option_values_array[@]}" 3>&1 1>&2 2>&3) 
        exitstatus=$?
        value_changed_to_text=$(jq --arg service_to_start "$service_to_start" --arg env_label_to_configure "$env_label_to_configure" --arg value_changed_tmp "${value_changed_tmp}" '.templates[] | select(.title==$service_to_start) | .env[] | select(.name==$env_label_to_configure) | .select[] | select(.text==$value_changed_tmp) |.value' ${DIR_CNF}/portainer_app_template.json | tr -d '"')
        # echo "value_changed_to_text ${value_changed_to_text}"
        if [ $exitstatus != 0 ]; then
            do_choose_service_env
        else
            do_get_modified_env_list
        fi
    else
        # echo "no options" 
        value_changed_to_text=$(whiptail --title "Change variable" --inputbox "$env_variable_label_with_description" 20 100 "$env_variable_to_change_default" 3>&1 1>&2 2>&3)
        exitstatus=$?
        if [ $exitstatus != 0 ]; then
            do_choose_service_env
        else
            do_get_modified_env_list
        fi   
    fi
}

# Modifies the required environment variable with a new value
do_get_modified_env_list() {
    
    service_env[$env_label_to_configure]="${value_changed_to_text}"
    __msg_debug "New value for $env_label_to_configure: ${value_changed_to_text}"
    do_choose_service_env
    return
    
}

# Main service menu, allows the user to modify its env variables or deploy the service
do_pre_up_options() {
    
    # load defaults if we are in a new service
    do_get_service_env_defaults
    
    pre_up_options=$(whiptail --notags --title "Bring up ${service_to_start}" --menu "" 20 78 8 "configure" "Configure environment variables" "start" "Start the service" 3>&1 1>&2 2>&3)
    exitstatus=$?
    if [ $exitstatus = 0 ]; then
        if [ $pre_up_options == "start" ]; then
            do_ask_for_confirmation
        else
            do_choose_service_env
        fi
    else
        do_container
    fi
}

# Ask user for confirmation before deploying the service
do_ask_for_confirmation() {
    if (whiptail --title "Confirmation" --yesno "Do you wan to deploy ${service_to_start}?" 8 78); then
        __msg_debug "User selected to deploy ${service_to_start}."
        do_check_service_type
    else
        __msg_debug "User selected Cancel, exit to main menu."
        do_pre_up_options
    fi
}

# Gets a root property for a service from the Portainer JSON file
do_get_property() {
    local service=$1
    local property=$2
    local result=$(jq --arg service "${service}" --arg property "${property}" '.templates[] | select(.title==$service) | .[$property]' ${DIR_CNF}/portainer_app_template.json | tr -d '"')
    echo "$result"
}

do_check_service_type() {

    do_get_basic_info
    do_env_variable_concat
    
    service_type="$(do_get_property "$service_to_start" type)"
    if [ $service_type == "1" ]; then
        tmp_name=$(echo $container_name | awk '{print $2}')
        CONTAINER_NAME=$(docker ps -a --format '{{.Names}}' | grep ${tmp_name})
        if [ -z $CONTAINER_NAME ]; then
            do_docker_run
        else
            whiptail --title "Notes" --msgbox  "$CONTAINER_NAME already exists." 10 60
            do_command
        fi
    else
        yml_file_path="./$(jq --arg service_to_start "$service_to_start" '.templates[] | select(.title==$service_to_start) | .repository.stackfile' ${DIR_CNF}/portainer_app_template.json | tr -d '"')"
        pushd ${DIR_CNF}  >> /dev/null
        tmp_name_list=$(cat $yml_file_path | grep container_name | awk '{print $2}')
        popd  >> /dev/null
        if [ -z $tmp_name_list ]; then
            do_docker_compose_up
        else
            exist=0
            for tmp_name in $tmp_name_list; do
                CONTAINER_NAME=$(docker ps -a --format '{{.Names}}' | grep ${tmp_name})
                if [ -z $CONTAINER_NAME ]; then
                    continue
                else
                    exist=1
                    whiptail --title "Notes" --msgbox  "$CONTAINER_NAME already exsits." 10 60
                    do_command
                    break;
                fi
            done

            if [ "$exist" == "0" ]; then
                do_docker_compose_up
            fi
        fi
    fi
}

do_get_basic_info(){

    # container image
    container_image="$(do_get_property "$service_to_start" image)"
    __msg_debug "container_image ${container_image}"

    # container name
    container_name="$(do_get_property "$service_to_start" name)"
    if [ "$container_name" != "null" ]; then
        container_name="--name ${container_name}"
    fi
    __msg_debug "container_name ${container_name}"

    # container restart policy
    container_restart_policy="$(do_get_property "$service_to_start" restart_policy)"
    if [ "$container_restart_policy" != "null" ]; then
        container_restart_policy="--restart=unless-stopped"
    fi
    __msg_debug "container_restart_policy ${container_restart_policy}"

    # container network
    container_network="$(do_get_property "$service_to_start" network)"
    if [ "$container_network" != "null" ]; then
        container_network="--net ${container_network}"
    fi   
    __msg_debug "container_network ${container_network}"

    # container hostname
    container_hostname="$(do_get_property "$service_to_start" hostname)"
    if [ "$container_hostname" != "null" ]; then
        container_hostname="-h ${container_hostname}"
    fi   
    __msg_debug "container_hostname ${container_hostname}"

    # container privledged
    container_privileged="$(do_get_property "$service_to_start" privileged)"
    if [ "$container_privileged" != "null" ]; then
        container_privileged="--privileged=true"
    fi   
    __msg_debug "container_privileged ${container_privileged}"

    # container volumes   
    container_volumes="$(do_get_property "$service_to_start" volumes | tr -d '"[]\n\t[:blank:]' | sed "s/},{/ -v /g" | sed "s/bind://g" | sed "s/,container//g" | sed "s/auto://g"|tr -d '{}')"
    if [ "$container_volumes" != "null" ]; then
        container_volumes="-v ${container_volumes}"
    fi
    __msg_debug "container_volumes ${container_volumes}"

    # container command
    container_command="$(do_get_property "$service_to_start" command)"
    __msg_debug "container_command ${container_command}"

    # container port
    container_ports="$(do_get_property "$service_to_start" ports | tr -d '"[][]\n\t[:blank:]' | sed "s/,/ -p /g")"
    if [ "$container_ports" != "null" ]; then
        container_ports="-p ${container_ports}"
    fi   
    __msg_debug "container_ports ${container_ports}"    
}

do_docker_run() {
    
    # Build command
    docker_run_command="${env_full_list} ${container_restart_policy} ${container_network} ${container_hostname} ${container_privileged} ${container_volumes} ${container_ports} ${container_name} ${container_image} ${container_command}"
    
    # Remove unset env variables
    docker_run_command="docker run -d -e $(echo ${docker_run_command} | sed 's/null//g')"
    
    # Evaluate
    __msg_debug $docker_run_command
    eval $docker_run_command
    response=$?

    if [ $response -ne 0 ]; 
    then
        whiptail --msgbox "Error bringing up the service" 10 60
    else
        do_print_post_up_info
    fi

    echo $response

}

do_docker_compose_up() {
    
    # Get yaml path
    yml_file_path=$(jq --arg service_to_start "$service_to_start" '.templates[] | select(.title==$service_to_start) | .repository.stackfile' ${DIR_CNF}/portainer_app_template.json | tr -d '"')

    # Build command
    docker_compose_env_list="$(echo ${env_full_list} | sed 's/-e //g')"
    docker_compose_command="${docker_compose_env_list} docker compose -f ./${yml_file_path} up -d"
    
    # Evaluate
    __msg_debug $docker_compose_command
    pushd ${DIR_CNF}
    eval $docker_compose_command
    response=$?
    popd

    # Check output
    if [ $response -ne 0 ]; 
    then
        whiptail --msgbox "Error bringing up the service" 10 60
    else
        do_print_post_up_info
    fi

    echo $response

}

do_print_post_up_info() {
    
    # Get post-up information
    post_up_info=$(do_get_property "$service_to_start" post_up_info)

    # Show Gateway EUI for packet forwarders
    if [[ $service_to_start == "LoRa Basics™ Station for Docker" ]] || [[ $service_to_start == "UDP Packet Forwarder" ]] || [[ $service_to_start == "2.4GHz Gateway UDP Packet Forwarder" ]]; then
        container_name_raw=$(do_get_property "$service_to_start" name)
        docker_container_id=$(docker ps -aqf name=${container_name_raw})
        GATEWAY_EUI=$(docker exec -it ${container_name_raw} ./get_eui.sh | tr -cd  '[a-zA-Z][0-9]'|sed s/GatewayEUI//)
        whiptail --title "Notes" --msgbox "Container id : $docker_container_id \nGateway EUI  : $GATEWAY_EUI \n \n$post_up_info" 30 78
    
    # Portainer post-up
    elif [[ $service_to_start == "portainer" ]] ; then
        whiptail --title "Notes" --msgbox  "$portainer_post_up_info" 30 78 
    
    # The rest
    else
        whiptail --title "Notes" --msgbox  "$post_up_info" 30 78 
    fi

}

# -----------------------------------------------------------------------------
# Main entry point
# -----------------------------------------------------------------------------

do_container() {
    do_select_service
}

# if [ $(id -u) -ne 0 ]; then
#   printf "Script must be run as root. Try 'sudo ./portainer-json-parser'\n"
#   exit 1
# fi

#do_container


